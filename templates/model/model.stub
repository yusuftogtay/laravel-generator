<?php

namespace $NAMESPACE_MODEL$;

use $NAMESPACE_MODEL_EXTEND$;
use Spatie\Image\Manipulations;
use Spatie\MediaLibrary\HasMedia;
use Illuminate\Database\Eloquent\Model;
use Spatie\MediaLibrary\InteractsWithMedia;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Spatie\MediaLibrary\MediaCollections\Models\Media;
$SOFT_DELETE_IMPORT$


$DOCS$
class $MODEL_NAME$ extends Model implements HasMedia
{
    use InteractsWithMedia {
        getFirstMediaUrl as protected getFirstMediaUrlTrait;
    }

    $SOFT_DELETE$

    public $table = '$TABLE_NAME$';

    $TIMESTAMPS$

    $SOFT_DELETE_DATES$

    $PRIMARY$
    
    public $fillable = [
        $FIELDS$
    ];

    /**
     * The attributes that should be casted to native types.
     *
     * @var array
     */
    protected $casts = [
        $CAST$
    ];

    /**
     * Validation rules
     *
     * @var array
     */
    public static $rules = [
        $RULES$
    ];

    /**
     * New Attributes
     *
     * @var array
     */
    protected $appends = [
        $APPENDS$
    ];

    /**
     * @param Media|null $media
     * @throws \Spatie\Image\Exceptions\InvalidManipulation
     */
    public function registerMediaConversions(Media $media = null): void
    {
        $this->addMediaConversion('thumb')
            ->fit(Manipulations::FIT_CROP, 200, 200)
            ->sharpen(10);

        $this->addMediaConversion('normal')
            ->fit(Manipulations::FIT_CROP, 475, 475)
            ->sharpen(10);

        $this->addMediaConversion('icon')
            ->fit(Manipulations::FIT_CROP, 100, 100)
            ->sharpen(10);
    }

    /**
     * to generate media url in case of fallback will
     * return the file type icon
     * @param string $conversion
     * @return string url
     */
    public function getFirstMediaUrl($collectionName = 'default',$conversion = '')
    {
        $url = $this->getFirstMediaUrlTrait($collectionName);
        $array = explode('.', $url);
        $extension = strtolower(end($array));
        if (in_array($extension,config('medialibrary.extensions_has_thumb'))) {
            return asset($this->getFirstMediaUrlTrait($collectionName,$conversion));
        }else{
            return asset(config('medialibrary.icons_folder').'/'.$extension.'.png');
        }
    }

    $RELATIONS$
    $RELATIONSHIP_ATTRIBUTE$
}
